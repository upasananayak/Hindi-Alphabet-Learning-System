<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Hindi Letter Drawing Practice</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      margin: 20px;
    }
    
    .canvas-container {
      position: relative;
      margin: 20px 0;
    }
    
    canvas {
      border: 1px solid #333;
      touch-action: none;
    }
    
    #referenceImage {
      position: absolute;
      top: 0;
      left: 0;
      z-index: -1;
      opacity: 0.3;
    }
    
    .controls {
      display: flex;
      gap: 10px;
      margin-bottom: 10px;
    }
    
    button, select {
      padding: 8px 16px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    
    button:hover, select:hover {
      background-color: #45a049;
    }
    
    .instructions {
      max-width: 600px;
      margin-bottom: 20px;
      text-align: center;
    }
    
    .stroke-info {
      margin-top: 10px;
      font-size: 16px;
    }
    
    .correct {
      color: green;
      font-weight: bold;
    }
    
    .incorrect {
      color: red;
      font-weight: bold;
    }
  </style>
</head>
<body>
  <h1>Hindi Letter Practice</h1>
  
  <div class="instructions">
    <p>Select a Hindi letter and draw it by following the dotted guide. Your strokes will be checked automatically.</p>
    <p>Strokes need to pass close to the key points but don't have to be exact.</p>
  </div>
  
  <div class="controls">
    <select id="letterSelect">
        <option value="अ">अ (a)</option>
        <option value="आ">आ (aa)</option>
        <option value="उ">उ (u)</option>
        <option value="ऊ">ऊ (oo)</option>
        <option value="ओ">ओ (o)</option>
        <option value="औ">औ (au)</option>
        <option value="ए">ए (e)</option>
        <option value="अं">अं (anusvara)</option>
        <option value="अः">अः (visarga)</option>
        <option value="त">त (ta)</option>
        <option value="र">र (ra)</option>
    </select>
    <button id="clearBtn">Clear Canvas</button>
    <button id="showHideBtn">Show/Hide Guide</button>
  </div>
  
  <div class="canvas-container">
    <canvas id="drawingCanvas" width="400" height="300"></canvas>
    <canvas id="referenceImage" width="400" height="300"></canvas>
  </div>
  
  <div id="strokeInfo" class="stroke-info">Draw the strokes in sequence</div>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const canvas = document.getElementById('drawingCanvas');
      const ctx = canvas.getContext('2d');
      const refCanvas = document.getElementById('referenceImage');
      const refCtx = refCanvas.getContext('2d');
      const strokeInfoElement = document.getElementById('strokeInfo');
      const letterSelect = document.getElementById('letterSelect');
      
      // Drawing state
      let isDrawing = false;
      let lastX = 0;
      let lastY = 0;
      let strokes = [];
      let currentStroke = [];
      let completedStrokes = [];
      let nextStrokeToComplete = 0;
      let currentLetter = "अ";
      
      // Define the strokes for various Hindi letters
      const letterData = {
        "अ": [
            { 
            "id": "stroke1", 
            "d": "M70,50 A50,35 0 1,1 70,120", 
            "dot": [70,50], 
            "text": [50,60],
            "description": "Top curved stroke",
            "keyPoints": [[70, 50], [90, 65], [100, 85], [90, 105], [70, 120]]
            },
            { 
            "id": "stroke2", 
            "d": "M70,120 A50,35 0 1,1 70,190", 
            "dot": [70,120], 
            "text": [85,150],
            "description": "Bottom curved stroke",
            "keyPoints": [[70, 120], [90, 140], [100, 155], [90, 170], [70, 190]]
            },
            { 
            "id": "stroke3", 
            "d": "M70,120 H140", 
            "dot": [70,120], 
            "text": [100,110],
            "description": "Horizontal middle stroke",
            "keyPoints": [[70, 120], [105, 120], [140, 120]]
            },
            { 
            "id": "stroke4", 
            "d": "M140,50 V180", 
            "dot": [140,50], 
            "text": [145,40],
            "description": "Vertical right stroke",
            "keyPoints": [[140, 50], [140, 115], [140, 180]]
            },
            { 
            "id": "stroke5", 
            "d": "M110,50 H170", 
            "dot": [110,50], 
            "text": [120,40],
            "description": "Top horizontal stroke",
            "keyPoints": [[110, 50], [140, 50], [170, 50]]
            }
        ],
        
        "आ": [
            { 
            "id": "stroke1", 
            "d": "M70,50 A50,35 0 1,1 70,120", 
            "dot": [70,50], 
            "text": [50,60],
            "description": "Top curved stroke",
            "keyPoints": [[70, 50], [90, 65], [100, 85], [90, 105], [70, 120]]
            },
            { 
            "id": "stroke2", 
            "d": "M70,120 A50,35 0 1,1 70,190", 
            "dot": [70,120], 
            "text": [85,150],
            "description": "Bottom curved stroke",
            "keyPoints": [[70, 120], [90, 140], [100, 155], [90, 170], [70, 190]]
            },
            { 
            "id": "stroke3", 
            "d": "M70,120 H140", 
            "dot": [70,120], 
            "text": [100,110],
            "description": "Horizontal middle stroke",
            "keyPoints": [[70, 120], [105, 120], [140, 120]]
            },
            { 
            "id": "stroke4", 
            "d": "M140,50 V180", 
            "dot": [140,50], 
            "text": [145,40],
            "description": "Vertical first right stroke",
            "keyPoints": [[140, 50], [140, 115], [140, 180]]
            },
            { 
            "id": "stroke5", 
            "d": "M110,50 H170", 
            "dot": [110,50], 
            "text": [120,40],
            "description": "Top horizontal stroke",
            "keyPoints": [[110, 50], [140, 50], [170, 50]]
            },
            { 
            "id": "stroke6", 
            "d": "M160,50 V180", 
            "dot": [160,50], 
            "text": [180,40],
            "description": "Vertical second right stroke",
            "keyPoints": [[160, 50], [160, 115], [160, 180]]
            }
        ],
        
        "उ": [
            { 
            "id": "stroke1", 
            "d": "M70,50 A50,35 0 1,1 70,120", 
            "dot": [70,50], 
            "text": [60,70],
            "description": "Top curved stroke",
            "keyPoints": [[70, 50], [90, 65], [100, 85], [90, 105], [70, 120]]
            },
            { 
            "id": "stroke2", 
            "d": "M70,120 A50,35 0 1,1 70,190", 
            "dot": [70,120], 
            "text": [85,150],
            "description": "Bottom curved stroke",
            "keyPoints": [[70, 120], [90, 140], [100, 155], [90, 170], [70, 190]]
            },
            { 
            "id": "stroke3", 
            "d": "M50,50 H170", 
            "dot": [50,50], 
            "text": [50,40],
            "description": "Top horizontal stroke",
            "keyPoints": [[50, 50], [110, 50], [170, 50]]
            }
        ],
        
        "ऊ": [
            { 
                "id": "stroke1", 
                "d": "M70,50 A50,35 0 1,1 70,120", 
                "dot": [70,50], 
                "text": [60,70],
                "description": "Top curved stroke",
                "keyPoints": [[70, 50], [90, 65], [100, 85], [90, 105], [70, 120]]
            },
            { 
                "id": "stroke2", 
                "d": "M70,120 A50,35 0 1,1 70,190", 
                "dot": [70,120], 
                "text": [85,150],
                "description": "Bottom curved stroke",
                "keyPoints": [[70, 120], [90, 140], [100, 155], [90, 170], [70, 190]]
            },
            { 
                "id": "stroke3", 
                "d": "M50,50 H170", 
                "dot": [50,50], 
                "text": [50,40],
                "description": "Top horizontal stroke",
                "keyPoints": [[50, 50], [110, 50], [170, 50]]
            },
            { 
                "id": "stroke4", 
                "d": "M70,120 A45,45 0 0,1 130,180", 
                "dot": [70,120], 
                "text": [100,180],
                "description": "Bottom right curved extension",
                "keyPoints": [[70, 120], [85, 140], [100, 160], [115, 175], [130, 180]]
            }
        ],
        "ए": [
            { 
            "id": "stroke1", 
            "d": "M130,50 V110", 
            "dot": [130,50], 
            "text": [145,40],
            "description": "Vertical left stroke",
            "keyPoints": [[130, 50], [130, 80], [130, 110]]
            },
            { 
            "id": "stroke2", 
            "d": "M130,110 L200,170", 
            "dot": [130,110], 
            "text": [140,130],
            "description": "Diagonal stroke",
            "keyPoints": [[130, 110], [165, 140], [200, 170]]
            },
            { 
            "id": "stroke3", 
            "d": "M190,50 V80", 
            "dot": [190,50], 
            "text": [200,40],
            "description": "Vertical right stroke",
            "keyPoints": [[190, 50], [190, 65], [190, 80]]
            },
            { 
            "id": "stroke4", 
            "d": "M190,80 L175,100", 
            "dot": [190,80], 
            "text": [200,80],
            "description": "Small diagonal stroke",
            "keyPoints": [[190, 80], [182, 90], [175, 100]]
            },
            { 
            "id": "stroke5", 
            "d": "M110,50 H250", 
            "dot": [110,50], 
            "text": [120,40],
            "description": "Top horizontal stroke",
            "keyPoints": [[110, 50], [180, 50], [250, 50]]
            }
        ],
        
        "ओ": [
            { 
            "id": "stroke1", 
            "d": "M70,50 A50,35 0 1,1 70,120", 
            "dot": [70,50], 
            "text": [50,60],
            "description": "Top curved stroke",
            "keyPoints": [[70, 50], [90, 65], [100, 85], [90, 105], [70, 120]]
            },
            { 
            "id": "stroke2", 
            "d": "M70,120 A50,35 0 1,1 70,190", 
            "dot": [70,120], 
            "text": [85,150],
            "description": "Bottom curved stroke",
            "keyPoints": [[70, 120], [90, 140], [100, 155], [90, 170], [70, 190]]
            },
            { 
            "id": "stroke3", 
            "d": "M70,120 H140", 
            "dot": [70,120], 
            "text": [100,110],
            "description": "Horizontal middle stroke",
            "keyPoints": [[70, 120], [105, 120], [140, 120]]
            },
            { 
            "id": "stroke4", 
            "d": "M140,50 V180", 
            "dot": [140,50], 
            "text": [145,40],
            "description": "Vertical first right stroke", 
            "keyPoints": [[140, 50], [140, 115], [140, 180]]
            },
            { 
            "id": "stroke5", 
            "d": "M110,50 H170", 
            "dot": [110,50], 
            "text": [120,40],
            "description": "Top horizontal stroke",
            "keyPoints": [[110, 50], [140, 50], [170, 50]]
            },
            { 
            "id": "stroke6", 
            "d": "M160,50 V180", 
            "dot": [160,50], 
            "text": [170,40],
            "description": "Vertical second right stroke",
            "keyPoints": [[160, 50], [160, 115], [160, 180]]
            },
            { 
            "id": "stroke7", 
            "d": "M160,50 L100,20", 
            "dot": [160,50], 
            "text": [160,40],
            "description": "Diagonal top stroke",
            "keyPoints": [[160, 50], [130, 35], [100, 20]]
            }
        ],
        
        "औ": [
            { 
            "id": "stroke1", 
            "d": "M70,50 A50,35 0 1,1 70,120", 
            "dot": [70,50], 
            "text": [50,60],
            "description": "Top curved stroke",
            "keyPoints": [[70, 50], [90, 65], [100, 85], [90, 105], [70, 120]]
            },
            { 
            "id": "stroke2", 
            "d": "M70,120 A50,35 0 1,1 70,190", 
            "dot": [70,120], 
            "text": [85,150],
            "description": "Bottom curved stroke",
            "keyPoints": [[70, 120], [90, 140], [100, 155], [90, 170], [70, 190]]
            },
            { 
            "id": "stroke3", 
            "d": "M70,120 H140", 
            "dot": [70,120], 
            "text": [100,110],
            "description": "Horizontal middle stroke",
            "keyPoints": [[70, 120], [105, 120], [140, 120]]
            },
            { 
            "id": "stroke4", 
            "d": "M140,50 V180", 
            "dot": [140,50], 
            "text": [145,40],
            "description": "Vertical first right stroke",
            "keyPoints": [[140, 50], [140, 115], [140, 180]]
            },
            { 
            "id": "stroke5", 
            "d": "M110,50 H170", 
            "dot": [110,50], 
            "text": [120,40],
            "description": "Top horizontal stroke",
            "keyPoints": [[110, 50], [140, 50], [170, 50]]
            },
            { 
            "id": "stroke6", 
            "d": "M160,50 V180", 
            "dot": [160,50], 
            "text": [170,40],
            "description": "Vertical second right stroke",
            "keyPoints": [[160, 50], [160, 115], [160, 180]]
            },
            { 
            "id": "stroke7", 
            "d": "M160,50 L100,20", 
            "dot": [160,50], 
            "text": [160,40],
            "description": "First diagonal top stroke",
            "keyPoints": [[160, 50], [130, 35], [100, 20]]
            },
            { 
            "id": "stroke8", 
            "d": "M160,50 L130,20", 
            "dot": [160,50], 
            "text": [150,30],
            "description": "Second diagonal top stroke",
            "keyPoints": [[160, 50], [145, 35], [130, 20]]
            }
        ],
        
        
        
        "अं": [
            { 
            "id": "stroke1", 
            "d": "M70,50 A50,35 0 1,1 70,120", 
            "dot": [70,50], 
            "text": [50,60],
            "description": "Top curved stroke",
            "keyPoints": [[70, 50], [90, 65], [100, 85], [90, 105], [70, 120]]
            },
            { 
            "id": "stroke2", 
            "d": "M70,120 A50,35 0 1,1 70,190", 
            "dot": [70,120], 
            "text": [85,150],
            "description": "Bottom curved stroke",
            "keyPoints": [[70, 120], [90, 140], [100, 155], [90, 170], [70, 190]]
            },
            { 
            "id": "stroke3", 
            "d": "M70,120 H140", 
            "dot": [70,120], 
            "text": [100,110],
            "description": "Horizontal middle stroke",
            "keyPoints": [[70, 120], [105, 120], [140, 120]]
            },
            { 
            "id": "stroke4", 
            "d": "M140,50 V180", 
            "dot": [140,50], 
            "text": [145,40],
            "description": "Vertical right stroke",
            "keyPoints": [[140, 50], [140, 115], [140, 180]]
            },
            { 
            "id": "stroke5", 
            "d": "M110,50 H170", 
            "dot": [110,50], 
            "text": [120,40],
            "description": "Top horizontal stroke",
            "keyPoints": [[110, 50], [140, 50], [170, 50]]
            },
            { 
            "id": "stroke6", 
            "d": "M125,25 A10,10 0 1,1 135,25", 
            "dot": [130,25], 
            "text": [130,15],
            "description": "Anusvar dot",
            "keyPoints": [[125, 25], [130, 15], [135, 25], [130, 35], [125, 25]]
            } 
        ],
        
        "अः": [
            { 
            "id": "stroke1", 
            "d": "M70,50 A50,35 0 1,1 70,120", 
            "dot": [70,50], 
            "text": [50,60],
            "description": "Top curved stroke",
            "keyPoints": [[70, 50], [90, 65], [100, 85], [90, 105], [70, 120]]
            },
            { 
            "id": "stroke2", 
            "d": "M70,120 A50,35 0 1,1 70,190", 
            "dot": [70,120], 
            "text": [85,150],
            "description": "Bottom curved stroke",
            "keyPoints": [[70, 120], [90, 140], [100, 155], [90, 170], [70, 190]]
            },
            { 
            "id": "stroke3", 
            "d": "M70,120 H140", 
            "dot": [70,120], 
            "text": [100,110],
            "description": "Horizontal middle stroke",
            "keyPoints": [[70, 120], [105, 120], [140, 120]]
            },
            { 
            "id": "stroke4", 
            "d": "M140,50 V180", 
            "dot": [140,50], 
            "text": [145,40],
            "description": "Vertical right stroke",
            "keyPoints": [[140, 50], [140, 115], [140, 180]]
            },
            { 
            "id": "stroke5", 
            "d": "M110,50 H170", 
            "dot": [110,50], 
            "text": [120,40],
            "description": "Top horizontal stroke",
            "keyPoints": [[110, 50], [140, 50], [170, 50]]
            },
            { 
            "id": "stroke6", 
            "d": "M160,170 A5,5 0 1,1 165,170", 
            "dot": [160,170], 
            "text": [155,165],
            "description": "Upper visarga dot",
            "keyPoints": [[160, 170], [162.5, 165], [165, 170], [162.5, 175], [160, 170]]
            },
            { 
            "id": "stroke7", 
            "d": "M160,185 A5,5 0 1,1 165,185", 
            "dot": [160,185], 
            "text": [155,200],
            "description": "Lower visarga dot",
            "keyPoints": [[160, 185], [162.5, 180], [165, 185], [162.5, 190], [160, 185]]
            }
        ],
        
        "त": [
            { 
            "id": "stroke1", 
            "d": "M150,30 L150,170", 
            "dot": [150,30], 
            "text": [155,25],
            "description": "Vertical stroke",
            "keyPoints": [[150, 30], [150, 100], [150, 170]]
            },
            { 
            "id": "stroke2", 
            "d": "M150,100 Q90,130 80,170", 
            "dot": [150,100], 
            "text": [115,65],
            "description": "Curved stroke",
            "keyPoints": [[150, 100], [120, 120], [100, 140], [80, 170]]
            },
            { 
            "id": "stroke3", 
            "d": "M50,30 H300", 
            "dot": [50,30], 
            "text": [35,25],
            "description": "Top horizontal stroke",
            "keyPoints": [[50, 30], [175, 30], [300, 30]]
            }
        ],
        
        "र": [
            { 
            "id": "stroke1", 
            "d": "M100,30 A100,50 0 0,1 100,100", 
            "dot": [100,30], 
            "text": [105,25],
            "description": "Curved top stroke",
            "keyPoints": [[100, 30], [120, 50], [120, 80], [100, 100]]
            },
            { 
            "id": "stroke2", 
            "d": "M100,100 L130,150", 
            "dot": [100,100], 
            "text": [110,95],
            "description": "Diagonal stroke",
            "keyPoints": [[100, 100], [115, 125], [130, 150]]
            },
            { 
            "id": "stroke3", 
            "d": "M50,30 H300", 
            "dot": [50,30], 
            "text": [55,45],
            "description": "Top horizontal stroke",
            "keyPoints": [[50, 30], [175, 30], [300, 30]]
            }
        ]
        };
      
      // Create reference guide with dots for selected Hindi letter
      function drawReference() {
        refCtx.clearRect(0, 0, refCanvas.width, refCanvas.height);
        
        const correctStrokes = letterData[currentLetter];
        
        // Draw the dotted paths for each stroke
        refCtx.strokeStyle = '#aaa';
        refCtx.setLineDash([5, 5]);
        refCtx.lineWidth = 2;
        
        correctStrokes.forEach(stroke => {
          refCtx.beginPath();
          const path = new Path2D(stroke.d);
          refCtx.stroke(path);
        });
        
        // Draw key points for each stroke with larger dots
        refCtx.setLineDash([]);
        correctStrokes.forEach((stroke, strokeIndex) => {
          stroke.keyPoints.forEach((point, pointIndex) => {
            // Different color for the next stroke to complete
            if (strokeIndex === nextStrokeToComplete) {
              refCtx.fillStyle = "#4CAF50";  // Green for next stroke
            } else if (strokeIndex < nextStrokeToComplete) {
              refCtx.fillStyle = "#888";     // Gray for completed strokes
            } else {
              refCtx.fillStyle = "#444";     // Dark for future strokes
            }
            
            refCtx.beginPath();
            refCtx.arc(point[0], point[1], 5, 0, Math.PI * 2);
            refCtx.fill();
            
            // Add point number for the key points
            if (strokeIndex === nextStrokeToComplete) {
              refCtx.fillStyle = "#000";
              refCtx.font = "10px Arial";
              refCtx.fillText((pointIndex + 1).toString(), point[0] - 3, point[1] - 7);
            }
          });
          
          // Add stroke number
          refCtx.fillStyle = "#000";
          refCtx.font = "12px Arial";
          refCtx.fillText((strokeIndex + 1).toString(), stroke.text[0], stroke.text[1]);
        });
        
        // Update stroke info text
        if (nextStrokeToComplete < correctStrokes.length) {
          strokeInfoElement.textContent = `Draw stroke ${nextStrokeToComplete + 1}: ${correctStrokes[nextStrokeToComplete].description}`;
          strokeInfoElement.className = "stroke-info";
        } else {
          strokeInfoElement.textContent = "All strokes completed!";
          strokeInfoElement.className = "stroke-info correct";
        }
      }
      
      // Check if a drawn stroke passes near the key points for the next expected stroke
      function checkStroke(drawnStroke) {
        const correctStrokes = letterData[currentLetter];
        
        if (nextStrokeToComplete >= correctStrokes.length) {
          return { correct: false, message: "All strokes already completed" };
        }
        
        if (drawnStroke.length < 5) {
          return { correct: false, message: "Stroke too short" };
        }
        
        const correctStroke = correctStrokes[nextStrokeToComplete];
        
        // Check if starting point is close to expected starting point
        const startPoint = drawnStroke[0];
        const expectedStart = correctStroke.dot;
        
        const startDistance = Math.sqrt(
          Math.pow(startPoint[0] - expectedStart[0], 2) + 
          Math.pow(startPoint[1] - expectedStart[1], 2)
        );
        
        // If starting point is too far, it's likely the wrong stroke
        if (startDistance > 40) {
          return { 
            correct: false, 
            message: `Incorrect starting point for stroke ${nextStrokeToComplete + 1}`
          };
        }
        
        // Check if the stroke passes near the key points
        const keyPointsPassed = checkKeyPointsCovered(drawnStroke, correctStroke.keyPoints);
        
        if (keyPointsPassed.passed) {
          nextStrokeToComplete++;
          return { 
            correct: true, 
            message: `Correct! Stroke ${nextStrokeToComplete} completed.`
          };
        } else {
          return { 
            correct: false, 
            message: `Try again - make sure to pass near all key points for stroke ${nextStrokeToComplete + 1}`
          };
        }
      }
      
      // Check if a drawn stroke passes near all the key points
      function checkKeyPointsCovered(drawnStroke, keyPoints) {
        const threshold = 20; // Distance threshold for considering a point "passed"
        const passedPoints = [];
        
        for (const keyPoint of keyPoints) {
          let passed = false;
          
          // Check if any part of the drawn stroke comes close to this key point
          for (const strokePoint of drawnStroke) {
            const distance = Math.sqrt(
              Math.pow(strokePoint[0] - keyPoint[0], 2) + 
              Math.pow(strokePoint[1] - keyPoint[1], 2)
            );
            
            if (distance < threshold) {
              passed = true;
              break;
            }
          }
          
          passedPoints.push(passed);
        }
        
        // Check if the majority of key points were passed near
        const pointsPassed = passedPoints.filter(p => p).length;
        const requiredPoints = Math.ceil(keyPoints.length * 0.6); // 60% of points must be passed
        
        return {
          passed: pointsPassed >= requiredPoints,
          pointsPassed: pointsPassed,
          totalPoints: keyPoints.length
        };
      }
      
      // Draw the current state of the canvas
      function draw() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.lineCap = 'round';
        ctx.lineJoin = 'round';
        
        // Draw all stored strokes
        strokes.forEach(stroke => {
          if (stroke.correct) {
            ctx.strokeStyle = '#0a0';  // Green for correct
          } else {
            ctx.strokeStyle = '#a00';  // Red for incorrect
          }
          
          ctx.lineWidth = 3;
          ctx.beginPath();
          ctx.moveTo(stroke.points[0][0], stroke.points[0][1]);
          
          for (let i = 1; i < stroke.points.length; i++) {
            ctx.lineTo(stroke.points[i][0], stroke.points[i][1]);
          }
          
          ctx.stroke();
        });
      }
      
      // Start drawing
      function startDrawing(e) {
        isDrawing = true;
        [lastX, lastY] = getCoordinates(e);
        currentStroke = [[lastX, lastY]];
        
        ctx.strokeStyle = '#000';
        ctx.lineWidth = 3;
        
        // Capture each point
        ctx.beginPath();
        ctx.moveTo(lastX, lastY);
        ctx.lineTo(lastX, lastY);
        ctx.stroke();
      }
      
      // Continue drawing
      function drawMove(e) {
        if (!isDrawing) return;
        
        e.preventDefault();
        const [currentX, currentY] = getCoordinates(e);
        
        currentStroke.push([currentX, currentY]);
        
        ctx.beginPath();
        ctx.moveTo(lastX, lastY);
        ctx.lineTo(currentX, currentY);
        ctx.stroke();
        
        [lastX, lastY] = [currentX, currentY];
      }
      
      // Finish drawing a stroke and check it
      function stopDrawing() {
        if (!isDrawing) return;
        isDrawing = false;
        
        if (currentStroke.length > 1) {
          // Check the stroke against the expected next stroke
          const result = checkStroke(currentStroke);
          
          // Add the stroke to the list with the result
          strokes.push({
            points: currentStroke,
            correct: result.correct,
            message: result.message
          });
          
          // Update the stroke info display
          if (result.correct) {
            strokeInfoElement.textContent = result.message;
            strokeInfoElement.className = "stroke-info correct";
            
            // Draw the reference again to update the next stroke highlighting
            drawReference();
          } else {
            strokeInfoElement.textContent = result.message;
            strokeInfoElement.className = "stroke-info incorrect";
          }
          
          // Redraw all strokes with appropriate colors
          draw();
        }
        
        currentStroke = [];
      }
      
      // Get coordinates for both mouse and touch events
      function getCoordinates(event) {
        let x, y;
        
        if (event.type.includes('touch')) {
          x = event.touches[0].clientX - canvas.getBoundingClientRect().left;
          y = event.touches[0].clientY - canvas.getBoundingClientRect().top;
        } else {
          x = event.offsetX;
          y = event.offsetY;
        }
        
        return [x, y];
      }
      
      // Clear the canvas and reset strokes
      function clearCanvas() {
        strokes = [];
        nextStrokeToComplete = 0;
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        drawReference();
      }
      
      // Toggle showing reference
      function toggleReference() {
        if (refCanvas.style.display === 'none') {
          refCanvas.style.display = 'block';
        } else {
          refCanvas.style.display = 'none';
        }
      }
      
      // Change letter
      function changeLetter() {
        currentLetter = letterSelect.value;
        document.title = `Hindi Letter ${currentLetter} Drawing Practice`;
        document.querySelector('h1').textContent = `Hindi Letter ${currentLetter} Practice`;
        
        // Reset everything
        clearCanvas();
      }
      
      // Event listeners
      canvas.addEventListener('mousedown', startDrawing);
      canvas.addEventListener('mousemove', drawMove);
      canvas.addEventListener('mouseup', stopDrawing);
      canvas.addEventListener('mouseout', stopDrawing);
      
      // Touch support
      canvas.addEventListener('touchstart', startDrawing);
      canvas.addEventListener('touchmove', drawMove);
      canvas.addEventListener('touchend', stopDrawing);
      canvas.addEventListener('touchcancel', stopDrawing);
      
      // Button actions
      document.getElementById('clearBtn').addEventListener('click', clearCanvas);
      document.getElementById('showHideBtn').addEventListener('click', toggleReference);
      letterSelect.addEventListener('change', changeLetter);
      
      // Initialize
      drawReference();
    });
  </script>
</body>
</html>